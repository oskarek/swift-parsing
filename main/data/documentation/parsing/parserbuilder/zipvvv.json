{"kind":"symbol","metadata":{"navigatorTitle":[{"kind":"identifier","text":"ZipVVV"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ZipVVV"}],"role":"symbol","modules":[{"name":"Parsing"}],"roleHeading":"Structure","title":"ParserBuilder.ZipVVV","extendedModule":"Parsing","symbolKind":"struct","externalID":"s:7Parsing13ParserBuilderO6ZipVVVV"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/init(_:_:_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/p0","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/p1","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/p2"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/parse(_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/ParserPrinter-Implementations"],"title":"Default Implementations"}],"variants":[{"paths":["\/documentation\/parsing\/parserbuilder\/zipvvv"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"]]},"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ZipVVV","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P0","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"P1","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"P2","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"P0"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P1"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P2"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P0"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"P1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P0"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"P1","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"P2","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P1","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"P2","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"}],"languages":["swift"]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVV/Parser-Implementations":{"url":"\/documentation\/parsing\/parserbuilder\/zipvvv\/parser-implementations","type":"topic","title":"Parser Implementations","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/Parser-Implementations","role":"collectionGroup","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"P0"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":", "},{"type":"codeVoice","code":"P1"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":", "},{"code":"P2","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ParserPrinter","type":"codeVoice"},{"text":", ","type":"text"},{"code":"P0.Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"P1.Input","type":"codeVoice"},{"text":", ","type":"text"},{"code":"P0.Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Void","type":"codeVoice"},{"type":"text","text":", "},{"code":"P1.Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"P2.Input","type":"codeVoice"},{"type":"text","text":", "},{"code":"P1.Output","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Void","type":"codeVoice"},{"type":"text","text":", and "},{"code":"P2.Output","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Void","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"A ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","url":"\/documentation\/parsing\/parserprinter","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVV/ParserPrinter-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/ParserPrinter-Implementations","role":"collectionGroup","type":"topic","url":"\/documentation\/parsing\/parserbuilder\/zipvvv\/parserprinter-implementations","title":"ParserPrinter Implementations","abstract":[],"kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","url":"\/documentation\/parsing\/parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVV/p2":{"type":"topic","kind":"symbol","title":"p2","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"p2"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"P2"}],"url":"\/documentation\/parsing\/parserbuilder\/zipvvv\/p2","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/p2"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVV/p0":{"abstract":[],"role":"symbol","type":"topic","title":"p0","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/p0","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"p0"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"P0"}],"url":"\/documentation\/parsing\/parserbuilder\/zipvvv\/p0"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"title":"Parse","url":"\/documentation\/parsing\/parse","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parse"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"title":"ParserBuilder","url":"\/documentation\/parsing\/parserbuilder","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVV/parse(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"P0"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/parse(_:)","type":"topic","url":"\/documentation\/parsing\/parserbuilder\/zipvvv\/parse(_:)","kind":"symbol","title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVV/p1":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/p1","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"p1"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"P1"}],"kind":"symbol","url":"\/documentation\/parsing\/parserbuilder\/zipvvv\/p1","role":"symbol","abstract":[],"type":"topic","title":"p1"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVV/init(_:_:_:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P0"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P1"},{"kind":"text","text":", "},{"text":"P2","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/parserbuilder\/zipvvv\/init(_:_:_:)","type":"topic","title":"init(_:_:_:)","role":"symbol","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV\/init(_:_:_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVV":{"url":"\/documentation\/parsing\/parserbuilder\/zipvvv","type":"topic","title":"ParserBuilder.ZipVVV","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVV","role":"symbol","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"ZipVVV"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ZipVVV"}]}}}