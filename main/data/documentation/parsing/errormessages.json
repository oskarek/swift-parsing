{"metadata":{"title":"Error Messages","roleHeading":"Article","modules":[{"name":"Parsing"}],"role":"article"},"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"When a parser fails it throws an error containing information about what went wrong. The actual","type":"text"},{"text":" ","type":"text"},{"text":"error thrown by the parsers shipped with this library is internal, and so it should be considered","type":"text"},{"text":" ","type":"text"},{"text":"opaque. To get a human-readable debug description of the error message you can stringify the error.","type":"text"},{"text":" ","type":"text"},{"text":"For  example, the following ","type":"text"},{"type":"codeVoice","code":"UInt8"},{"text":" parser fails to parse a string that would cause it to overflow:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["do {","  var input = \"1234 Hello\"[...]","  let number = try UInt8.parser().parse(&input))","} catch {","  print(error)","","  \/\/ error: failed to process \"UInt8\"","  \/\/  --> input:1:1-4","  \/\/ 1 | 1234 Hello","  \/\/   | ^^^^ overflowed 255","}"],"type":"codeListing"},{"inlineContent":[{"text":"When the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" parser is used and fails, there are multiple errors that can be shown. ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"prioritizes the error messages based on which parser got the furthest along. For example, consider","type":"text"},{"text":" ","type":"text"},{"text":"a parser that can parse accounting style of numbers, i.e. plain numbers are considered positive","type":"text"},{"text":" ","type":"text"},{"text":"and numbers in parentheses are considered negative:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")   \/\/ 100","try accountingNumber.parse(\"(100)\") \/\/ -100"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If we try parsing something erroneous, such as “(100]”, we get multiple error messages, but the"},{"type":"text","text":" "},{"type":"text","text":"second parser’s error shows first since it was able to get the furthest:"}],"type":"paragraph"},{"syntax":"swift","code":["do {","  try accountingNumber.parse(\"(100]\")","} catch {","  print(error)","","  \/\/ error: multiple failures occurred","  \/\/","  \/\/ error: unexpected input","  \/\/  --> input:1:5","  \/\/ 1 | (100]","  \/\/   |     ^ expected \")\"","  \/\/","  \/\/ error: unexpected input","  \/\/  --> input:1:1","  \/\/ 1 | (100]","  \/\/   | ^ expected integer","}"],"type":"codeListing"},{"level":2,"anchor":"Improving-error-messages","text":"Improving error messages","type":"heading"},{"inlineContent":[{"type":"text","text":"The quality of error messages emitted by a parser can depend on the manner in which the parser was"},{"type":"text","text":" "},{"type":"text","text":"constructed. Some parser operators are powerful and convenient, but can cause the quality of error"},{"type":"text","text":" "},{"type":"text","text":"messaging to degrade."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, we could construct a parser that consumes a single uncommented line from an input","type":"text"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"inlineContent":[{"text":"i.e.","type":"text"}],"type":"emphasis"},{"text":", a line that does not begin with “\/\/”) by using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/compactMap(_:)","type":"reference"},{"text":" to check the line","type":"text"},{"text":" ","type":"text"},{"text":"for a  prefix:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let uncommentedLine = Prefix { $0 != \"\\n\" }","  .compactMap { $0.starts(with: \"\/\/\") ? nil : $0 }","","try uncommentedLine.parse(\"\/\/ let x = 1\")","","\/\/ error: failed to process \"Substring\" from \"\/\/ let x = 1\"","\/\/  --> input:1:1-12","\/\/ 1 | \/\/ let x = 1","\/\/   | ^^^^^^^^^^^^"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, when this parser fails it can only highlight the entire line as having a problem because"},{"type":"text","text":" "},{"type":"text","text":"it cannot know that the only thing that failed was that the first two characters were slashes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"We can rewrite this parser in a different, but equivalent, way by using the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","isActive":true,"type":"reference"},{"text":" parser to first","type":"text"},{"text":" ","type":"text"},{"text":"confirm that the line does not begin with “\/\/”, and then consume the entire line:","type":"text"}]},{"syntax":"swift","code":["let uncommentedLine = Parse {","  Not { \"\/\/\" }","  Prefix { $0 != \"\\n\" }","}","","try uncommentedLine.parse(\"\/\/ let x = 1\")","","\/\/ error: unexpected input","\/\/  --> input:1:1-2","\/\/ 1 | \/\/ let x = 1","\/\/   | ^^ expected not to be processed"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This provides better error messaging because ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","type":"reference","isActive":true},{"text":" knows exactly what matched that we did not want","type":"text"},{"text":" ","type":"text"},{"text":"to match, and so it can highlight those specific characters.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using the "},{"code":"Many","type":"codeVoice"},{"type":"text","text":" parser you can improve error messaging by supplying a “terminator” parser,"},{"type":"text","text":" "},{"type":"text","text":"which is an optional argument. The terminator parser is run after the element and separator"},{"type":"text","text":" "},{"type":"text","text":"parsers have consumed as much as they can, and allows you to assert on exactly what is left"},{"type":"text","text":" "},{"type":"text","text":"afterwards."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if a parser is run on an input that has a typo in the last row of data, and a"},{"type":"text","text":" "},{"type":"text","text":"terminator is not specified, the parser will succeed without consuming that last row and we won’t"},{"type":"text","text":" "},{"type":"text","text":"know what went wrong:"}]},{"syntax":"swift","code":["struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}","","let user = Parse(User.init(id:name:isAdmin:)) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","}","","var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"[...]","","let output = try users.parse(&input)","output.count \/\/ 2","input \/\/ \"\\n3,Blob Sr.,tru\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"However, by adding a terminator to this ","type":"text"},{"code":"users","type":"codeVoice"},{"text":" parser an error will be throw that points to the","type":"text"},{"text":" ","type":"text"},{"text":"exact spot where the typo occurred:","type":"text"}]},{"syntax":"swift","code":["let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","let output = try users.parse(&input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""],"type":"codeListing"},{"type":"heading","text":"Throwing your own errors","level":2,"anchor":"Throwing-your-own-errors"},{"type":"paragraph","inlineContent":[{"text":"Although the error type thrown by the parsers that ship in this library is currently internal, and","type":"text"},{"text":" ","type":"text"},{"text":"so should be thought of as opaque, it is still possible to throw your own errors. Your errors will","type":"text"},{"text":" ","type":"text"},{"text":"automatically be reformatted and contextualized to show exactly where the error occurred.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose we wanted a parser that only parsed the digits 0-9 from the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"string and transformed it into an integer. This is subtly different from "},{"type":"codeVoice","code":"Int.parser()"},{"type":"text","text":" which"},{"type":"text","text":" "},{"type":"text","text":"supports negative numbers, exponential formatting, and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Constructing a "},{"type":"codeVoice","code":"Digits"},{"type":"text","text":" parser is easy enough, and we can introduce a custom struct error for"},{"type":"text","text":" "},{"type":"text","text":"customizing the message displayed:"}]},{"syntax":"swift","code":["struct DigitsError: Error {","  let message = \"Expected a prefix of digits 0-9\"","}","","struct Digits: Parser {","  func parse(_ input: inout Substring) throws -> Int {","    let digits = input.prefix { $0 >= \"0\" && $0 <= \"9\" }","    guard let output = Int(digits)","    else {","      throw DigitsError()","    }","    input.removeFirst(digits.count)","    return output","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If we swap out the ","type":"text"},{"code":"Int.parser()","type":"codeVoice"},{"text":" for a ","type":"text"},{"code":"Digits","type":"codeVoice"},{"text":" parser in ","type":"text"},{"code":"user","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","code":["let user = Parse(User.init) {","  Digits()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And we introduce an incorrect value into the input:","type":"text"}]},{"syntax":"swift","code":["let input = \"\"\"","1,Blob,true","-2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"[...]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then when running the parser we get a nice error message that shows exactly what went wrong:"}]},{"syntax":"swift","code":["try user.parse(&input)","","\/\/ error: DigitsError(message: \"Expected a prefix of digits 0-9\")","\/\/  --> input:2:1","\/\/ 2 | -2,Blob Sr,false","\/\/   | ^"],"type":"codeListing"}],"kind":"content"}],"sections":[],"abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages"},"kind":"article","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"title":"Articles"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"kind":"article","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"title":"Backtracking","url":"\/documentation\/parsing\/backtracking","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"role":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"url":"\/documentation\/parsing\/oneof","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"type":"topic","title":"OneOf","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/compactMap(_:)":{"abstract":[{"text":"Returns a parser that outputs the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" result of calling the given closure with the","type":"text"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/compactMap(_:)","title":"compactMap(_:)","url":"\/documentation\/parsing\/parser\/compactmap(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"url":"\/documentation\/parsing\/gettingstarted","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"title":"Getting Started","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","type":"topic","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"kind":"article","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"title":"String Abstractions","url":"\/documentation\/parsing\/stringabstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","url":"\/documentation\/parsing\/parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Not","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"role":"symbol","title":"Not","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","url":"\/documentation\/parsing\/not","navigatorTitle":[{"text":"Not","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"kind":"article","abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"title":"Design","url":"\/documentation\/parsing\/design","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic"}}}