{"metadata":{"roleHeading":"Instance Method","title":"print(_:into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"(","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"modules":[{"name":"Parsing"}],"externalID":"s:7Parsing7ParsersO11ConditionalOA2A13ParserPrinterRzAaFR_rlE5print_4intoy6OutputQz_5InputQzztKF","role":"symbol","symbolKind":"method","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"First","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ParserPrinter","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Second","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ParserPrinter","type":"codeVoice"},{"text":", ","type":"text"},{"code":"First.Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Second.Input","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"First.Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Second.Output","type":"codeVoice"},{"text":".","type":"text"}]},"extendedModule":"Parsing"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/conditional\/print(_:into:)"]}],"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/print(_:into:)","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"externalParam","text":"into"},{"kind":"text","text":" "},{"kind":"internalParam","text":"input"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameters"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"output: A well-structured value to be printed to the given input.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"input: A nebulous, mutable piece of data to be incrementally printed into."}],"type":"paragraph"}]}]}]}]}]}],"abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/ParserPrinter-Implementations"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional/print(_:into:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"First"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":", "},{"type":"codeVoice","code":"Second"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":", "},{"type":"codeVoice","code":"First.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Second.Input"},{"type":"text","text":", and "},{"type":"codeVoice","code":"First.Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Second.Output"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"print(_:into:)","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/print(_:into:)","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/parsers\/conditional\/print(_:into:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"title":"Parsers","url":"\/documentation\/parsing\/parsers","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"type":"topic","title":"Parsers.Conditional","url":"\/documentation\/parsing\/parsers\/conditional","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"abstract":[{"text":"A parser that can parse output from two types of parsers.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional/ParserPrinter-Implementations":{"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/ParserPrinter-Implementations","abstract":[],"role":"collectionGroup","title":"ParserPrinter Implementations","type":"topic","url":"\/documentation\/parsing\/parsers\/conditional\/parserprinter-implementations"}}}