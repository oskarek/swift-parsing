{"kind":"symbol","metadata":{"title":"filter(_:)","externalID":"s:7Parsing6ParserPAAE6filteryAA7ParsersO6FilterVy_xGSb6OutputQzcF::SYNTHESIZED::s:7Parsing7ParsersO9IntParserV","extendedModule":"Parsing","roleHeading":"Instance Method","symbolKind":"method","modules":[{"name":"Parsing"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"filter","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO6FilterV","text":"Filter","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"abstract":[{"type":"text","text":"Returns a parser that filters output from this parser when its output does not satisfy the"},{"type":"text","text":" "},{"type":"text","text":"given predicate."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/filter(_:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/Parser-Implementations"]]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"filter","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"Filter","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter","preciseIdentifier":"s:7Parsing7ParsersO6FilterV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"name":"predicate","content":[{"inlineContent":[{"text":"A closure that takes an output from this parser and returns a Boolean","type":"text"},{"text":" ","type":"text"},{"text":"value indicating whether the output should be returned.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"A parser that filters its output.","type":"text"}]}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is similar to "},{"type":"codeVoice","code":"Sequence.filter"},{"type":"text","text":" in the Swift standard library, as well as"},{"type":"text","text":" "},{"type":"codeVoice","code":"Publisher.filter"},{"type":"text","text":" in the Combine framework."}]},{"type":"paragraph","inlineContent":[{"text":"This parser fails if the predicate is not satisfied on the output of the upstream parser. For example,","type":"text"},{"text":" ","type":"text"},{"text":"the following parser consumes only even integers and so fails when an odd integer is used:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"43 Hello, world!\"[...]","let number = try Int.parser().filter { $0.isMultiple(of: 2) }.parse(&input)","\/\/ error: processed value 43 failed to satisfy predicate","\/\/  --> input:1:1-2","\/\/ 1 | 43 Hello, world!","\/\/   | ^^ processed input"]}],"kind":"content"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/intparser\/filter(_:)"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser/filter(_:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"filter","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"Filter","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO6FilterV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Returns a parser that filters output from this parser when its output does not satisfy the"},{"type":"text","text":" "},{"text":"given predicate.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/filter(_:)","role":"symbol","title":"filter(_:)","url":"\/documentation\/parsing\/parsers\/intparser\/filter(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser","title":"Parsers.IntParser","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"IntParser"}],"abstract":[{"type":"text","text":"A parser that consumes an integer (with an optional leading "},{"type":"codeVoice","code":"+"},{"type":"text","text":" or "},{"type":"codeVoice","code":"-"},{"type":"text","text":" sign for signed integer"},{"type":"text","text":" "},{"type":"text","text":"types) from the beginning of a collection of UTF8 code units."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IntParser"}],"url":"\/documentation\/parsing\/parsers\/intparser","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"title":"Parsers","url":"\/documentation\/parsing\/parsers","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser/Parser-Implementations":{"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/Parser-Implementations","title":"Parser Implementations","role":"collectionGroup","abstract":[],"url":"\/documentation\/parsing\/parsers\/intparser\/parser-implementations","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Filter":{"url":"\/documentation\/parsing\/parsers\/filter","type":"topic","title":"Parsers.Filter","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter","role":"symbol","abstract":[{"type":"text","text":"A parser that filters the output of an upstream parser when it does not satisfy a predicate."}],"navigatorTitle":[{"kind":"identifier","text":"Filter"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Filter"}]}}}