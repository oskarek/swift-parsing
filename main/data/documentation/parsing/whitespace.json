{"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Whitespace","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Length","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","preciseIdentifier":"s:7Parsing13CountingRangeP","text":"CountingRange","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","preciseIdentifier":"s:7Parsing10ConversionP","text":"Conversion","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"preciseIdentifier":"s:s4UTF8a","text":"UTF8","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","text":"CodeUnit","kind":"typeIdentifier"}],"platforms":["Linux"]}],"kind":"declarations"}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"]}],"seeAlsoSections":[{"generated":true,"title":"Common parsers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"]}],"variants":[{"paths":["\/documentation\/parsing\/whitespace"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"A parser that consumes whitespace from the beginning of input."}],"kind":"symbol","topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-5mvhf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-7y3zp","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-hfmk","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-2i1mj","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-47o7f","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-6vmf6"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/configuration-swift.property"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/parse(_:)"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Configuration-swift.enum"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/ParserPrinter-Implementations"]}],"metadata":{"roleHeading":"Structure","symbolKind":"struct","externalID":"s:7Parsing10WhitespaceV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}],"title":"Whitespace","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"modules":[{"name":"Parsing"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","interfaceLanguage":"swift"},"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixUpTo"}],"role":"symbol","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"url":"\/documentation\/parsing\/prefixupto","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PrefixUpTo"}],"type":"topic","title":"PrefixUpTo","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"role":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"url":"\/documentation\/parsing\/oneof","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"type":"topic","title":"OneOf","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"title":"Parse","url":"\/documentation\/parsing\/parse","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parse"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"abstract":[{"text":"A parser that consumes the characters contained in a ","type":"text"},{"type":"codeVoice","code":"CharacterSet"},{"text":" from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/characterset","kind":"article","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","role":"article","title":"CharacterSet"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"role":"symbol","navigatorTitle":[{"text":"AnyParser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParser","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"A type-erased parser of ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" from ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":".","type":"text"}],"title":"AnyParser","url":"\/documentation\/parsing\/anyparser"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:_:)-2i1mj":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.Identity<Substring.UTF8View>"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[],"kind":"symbol","role":"symbol","title":"init(_:_:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Whitespace","preciseIdentifier":"s:7Parsing10WhitespaceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-2i1mj","url":"\/documentation\/parsing\/whitespace\/init(_:_:)-2i1mj"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","url":"\/documentation\/parsing\/parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Prefix","kind":"identifier"}],"title":"Prefix","url":"\/documentation\/parsing\/prefix","type":"topic","navigatorTitle":[{"text":"Prefix","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"url":"\/documentation\/parsing\/peek","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"navigatorTitle":[{"text":"Peek","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","role":"symbol","title":"Peek"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:_:)-6vmf6":{"abstract":[],"url":"\/documentation\/parsing\/whitespace\/init(_:_:)-6vmf6","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Whitespace","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.SubstringToUTF8View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-6vmf6","role":"symbol","title":"init(_:_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","type":"topic","url":"\/documentation\/parsing\/always","navigatorTitle":[{"kind":"identifier","text":"Always"}],"title":"Always","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/Parser-Implementations":{"title":"Parser Implementations","abstract":[],"url":"\/documentation\/parsing\/whitespace\/parser-implementations","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Parser-Implementations","type":"topic","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"title":"ParserPrinter","abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"url":"\/documentation\/parsing\/parserprinter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Length"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Conversion"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","abstract":[],"url":"\/documentation\/parsing\/whitespace\/parserprinter-implementations","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/ParserPrinter-Implementations","type":"topic","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}],"title":"CountingRange","type":"topic","url":"\/documentation\/parsing\/countingrange","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"title":"UUID","abstract":[{"text":"A parser that consumes a ","type":"text"},{"type":"codeVoice","code":"UUID"},{"text":" value from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/uuid","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"title":"String","abstract":[{"text":"A parser that consumes a string literal from the beginning of a string.","type":"text"}],"url":"\/documentation\/parsing\/string","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:)-5mvhf":{"title":"init(_:)","abstract":[],"url":"\/documentation\/parsing\/whitespace\/init(_:)-5mvhf","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Whitespace","preciseIdentifier":"s:7Parsing10WhitespaceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"InputToBytes"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-5mvhf","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.Identity<Substring.UTF8View>"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"role":"symbol","url":"\/documentation\/parsing\/lazy\/parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"title":"parse(_:)","type":"topic","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","title":"FromUTF8View","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FromUTF8View"}],"type":"topic","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUTF8View"}],"kind":"symbol","url":"\/documentation\/parsing\/fromutf8view"},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","title":"Bool","abstract":[{"type":"text","text":"A parser that consumes a Boolean value from the beginning of a string."}],"role":"article","type":"topic","kind":"article","url":"\/documentation\/parsing\/bool"},"doc://co.pointfree.Parsing/documentation/Parsing/Digits":{"abstract":[{"type":"text","text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code"},{"type":"text","text":" "},{"type":"text","text":"units."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","type":"topic","url":"\/documentation\/parsing\/digits","navigatorTitle":[{"kind":"identifier","text":"Digits"}],"title":"Digits","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Digits"}],"kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","title":"FromSubstring","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FromSubstring"}],"type":"topic","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"}],"kind":"symbol","url":"\/documentation\/parsing\/fromsubstring"},"doc://co.pointfree.Parsing/documentation/Parsing/CaseIterable":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","title":"CaseIterable","abstract":[{"type":"text","text":"A parser-printer that consumes a case-iterable, raw representable value from the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"string."}],"role":"article","type":"topic","kind":"article","url":"\/documentation\/parsing\/caseiterable"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","title":"FromUnicodeScalarView","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FromUnicodeScalarView"}],"type":"topic","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUnicodeScalarView"}],"kind":"symbol","url":"\/documentation\/parsing\/fromunicodescalarview"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:)-hfmk":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-hfmk","title":"init(_:)","abstract":[],"role":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.SubstringToUTF8View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing10WhitespaceV","text":"Whitespace"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":", "},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/whitespace\/init(_:)-hfmk"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"kind":"symbol","url":"\/documentation\/parsing\/skip","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Skip","kind":"identifier"}],"type":"topic","abstract":[{"text":"A parser that discards the output of another parser.","type":"text"}],"title":"Skip","navigatorTitle":[{"text":"Skip","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip"},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"navigatorTitle":[{"text":"First","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/first","abstract":[{"text":"A parser that consumes the first element from a collection.","type":"text"}],"kind":"symbol","type":"topic","title":"First","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","role":"symbol","navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"url":"\/documentation\/parsing\/optionally","title":"Optionally"},"doc://co.pointfree.Parsing/documentation/Parsing/From":{"abstract":[],"url":"\/documentation\/parsing\/from","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","navigatorTitle":[{"text":"From","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"From","kind":"identifier"}],"title":"From","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/Configuration-swift.enum":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Configuration","kind":"identifier"}],"kind":"symbol","abstract":[],"role":"symbol","title":"Whitespace.Configuration","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Configuration-swift.enum","url":"\/documentation\/parsing\/whitespace\/configuration-swift.enum","navigatorTitle":[{"text":"Configuration","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"abstract":[{"type":"text","text":"A parser that consumes whitespace from the beginning of input."}],"url":"\/documentation\/parsing\/whitespace","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}],"title":"Whitespace","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"role":"article","url":"\/documentation\/parsing\/float","abstract":[{"text":"A parser that consumes a floating-point number from the beginning of a string.","type":"text"}],"kind":"article","type":"topic","title":"Float","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float"},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"role":"article","url":"\/documentation\/parsing\/int","abstract":[{"text":"A parser that consumes an integer from the beginning of a string.","type":"text"}],"kind":"article","type":"topic","title":"Int","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:)-7y3zp":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV","text":"Whitespace","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Length","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"CountingRange","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Conversion"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/parsing\/whitespace\/init(_:)-7y3zp","abstract":[],"kind":"symbol","type":"topic","title":"init(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:)-7y3zp"},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Not","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"role":"symbol","title":"Not","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","url":"\/documentation\/parsing\/not","navigatorTitle":[{"text":"Not","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/lazy","navigatorTitle":[{"text":"Lazy","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Lazy","kind":"identifier"}],"abstract":[{"text":"A parser that waits for a call to its ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)"},{"text":" method before running the given closure to","type":"text"},{"text":" ","type":"text"},{"text":"create a parser for the given input.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","role":"symbol","title":"Lazy"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"navigatorTitle":[{"text":"Fail","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fail","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/fail","abstract":[{"text":"A parser that always fails, no matter the input.","type":"text"}],"kind":"symbol","type":"topic","title":"Fail","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"url":"\/documentation\/parsing\/startswith","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","navigatorTitle":[{"kind":"identifier","text":"StartsWith"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}],"title":"StartsWith","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init(_:_:)-47o7f":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV","text":"Whitespace","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Length"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CountingRange"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Conversion"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":", ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/parsing\/whitespace\/init(_:_:)-47o7f","abstract":[],"kind":"symbol","type":"topic","title":"init(_:_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init(_:_:)-47o7f"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/configuration-swift.property":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"configuration","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV","text":"Whitespace","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:7Parsing10WhitespaceV13ConfigurationO","text":"Configuration","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/parsing\/whitespace\/configuration-swift.property","abstract":[],"kind":"symbol","type":"topic","title":"configuration","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/configuration-swift.property"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"navigatorTitle":[{"text":"PrefixThrough","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixThrough","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/prefixthrough","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"kind":"symbol","type":"topic","title":"PrefixThrough","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/parse(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","url":"\/documentation\/parsing\/whitespace\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"type":"text","text":" "},{"type":"text","text":"input."}],"kind":"symbol","type":"topic","title":"parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","type":"topic","url":"\/documentation\/parsing\/end","navigatorTitle":[{"kind":"identifier","text":"End"}],"title":"End","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"}],"kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"navigatorTitle":[{"text":"Stream","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/stream","abstract":[{"text":"A parser that can parse streams of input.","type":"text"}],"kind":"symbol","type":"topic","title":"Stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Many","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}],"title":"Many","type":"topic","url":"\/documentation\/parsing\/many","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","abstract":[{"text":"A parser that attempts to run another parser as many times as specified, accumulating the result","type":"text"},{"text":" ","type":"text"},{"text":"of the outputs.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"navigatorTitle":[{"text":"Newline","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}],"role":"symbol","deprecated":true,"url":"\/documentation\/parsing\/newline","abstract":[],"kind":"symbol","type":"topic","title":"Newline","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"kind":"symbol","url":"\/documentation\/parsing\/conversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","title":"Conversion","abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value back into an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Consumed":{"type":"topic","abstract":[{"text":"A parser that returns the subsequence of input consumed by another parser.","type":"text"}],"title":"Consumed","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Consumed"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Consumed"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","url":"\/documentation\/parsing\/consumed"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"url":"\/documentation\/parsing\/rest","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Rest"}],"title":"Rest","abstract":[{"text":"A parser that consumes everything to the end of the collection and returns this subsequence as","type":"text"},{"text":" ","type":"text"},{"text":"its output.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Rest"}],"type":"topic"}}}