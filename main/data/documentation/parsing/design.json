{"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","interfaceLanguage":"swift"},"metadata":{"role":"article","modules":[{"name":"Parsing"}],"roleHeading":"Article","title":"Design"},"abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Protocol","anchor":"Protocol","type":"heading"},{"inlineContent":[{"text":"The design of the library is largely inspired by the Swift standard library and Apple’s Combine","type":"text"},{"text":" ","type":"text"},{"text":"framework. A parser is represented as a protocol that many types conform to, and then parser","type":"text"},{"text":" ","type":"text"},{"text":"transformations (also known as “combinators”) are methods that return concrete types conforming to","type":"text"},{"text":" ","type":"text"},{"text":"the parser protocol.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, to parse all the characters from the beginning of a substring until you encounter a"},{"text":" ","type":"text"},{"text":"comma you can use the ","type":"text"},{"type":"codeVoice","code":"Prefix"},{"text":" parser:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let parser = Prefix { $0 != \",\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello\"","input                     \/\/ \",World\""],"type":"codeListing"},{"inlineContent":[{"text":"The type of this parser is:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Prefix<Substring>"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"We can "},{"type":"codeVoice","code":".map"},{"type":"text","text":" on this parser in order to transform its output, which in this case is the string"},{"type":"text","text":" "},{"type":"text","text":"“Hello”:"}],"type":"paragraph"},{"syntax":"swift","code":["let parser = Prefix { $0 != \",\" }",".map { $0 + \"!!!\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello!!!\"","input                     \/\/ \",World\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The type of this parser is now:"}],"type":"paragraph"},{"syntax":"swift","code":["Parsers.Map<Prefix<Substring>, Substring>"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Notice that the type of the parser encodes the operations that we performed. This adds a bit of"},{"text":" ","type":"text"},{"text":"complexity when using these types, but comes with some performance benefits because Swift can","type":"text"},{"text":" ","type":"text"},{"text":"usually inline and optimize away the creation of those nested types.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Result Builders","anchor":"Result-Builders","type":"heading"},{"inlineContent":[{"type":"text","text":"The library takes advantage of Swift’s "},{"type":"codeVoice","code":"@resultBuilder"},{"type":"text","text":" feature to make constructing complex parsers"},{"type":"text","text":" "},{"type":"text","text":"as fluent as possible, and should be reminiscent of how views are constructed in SwiftUI. The main"},{"type":"text","text":" "},{"type":"text","text":"entry point into building a parser is the "},{"type":"codeVoice","code":"Parse"},{"type":"text","text":" builder:"}],"type":"paragraph"},{"syntax":"swift","code":["Parse {","","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In this builder block you can specify parsers that will be run one after another. For example, if"},{"type":"text","text":" "},{"type":"text","text":"you wanted to parse an integer, then a comma, and then a boolean from a string, you can simply do:"}],"type":"paragraph"},{"syntax":"swift","code":["Parse {","  Int.parser()","  \",\"","  Bool.parser()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that the "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type conforms to the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"type":"text","text":" protocol, and represents a parser that"},{"type":"text","text":" "},{"type":"text","text":"consumes that exact string from the beginning of an input if it matches, and otherwise fails."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Many of the parsers and operators that come with the library are configured with parser builders"},{"type":"text","text":" "},{"type":"text","text":"to maximize readability of the parsers. For example, to parse accounting syntax of numbers, where"},{"type":"text","text":" "},{"type":"text","text":"parenthesized numbers are negative, we can use the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" parser builder:"}],"type":"paragraph"},{"syntax":"swift","code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")    \/\/ 100","try accountingNumber.parse(\"(100)\")  \/\/ -100"],"type":"codeListing"},{"level":2,"text":"Operators","anchor":"Operators","type":"heading"},{"inlineContent":[{"text":"Parser operators (also called “combinators”) are methods defined on the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference"},{"text":" protocol that","type":"text"},{"text":" ","type":"text"},{"text":"return a parser. For example, the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","type":"reference"},{"text":" operator is a method that returns","type":"text"},{"text":" ","type":"text"},{"text":"something called a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","type":"reference"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Parser {","  public func map<NewOutput>(","    _ transform: @escaping (Output) -> NewOutput","  ) -> Parsers.Map<Self, NewOutput> {","    .init(upstream: self, transform: transform)","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"And ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"text":" is a dedicated type that implements the logic of the map operation. In","type":"text"},{"text":" ","type":"text"},{"text":"particular, in runs the upstream parser and then transforms its output:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Parsers {","  public struct Map<Upstream: Parser, NewOutput>: Parser {","    public let upstream: Upstream","    public let transform: (Upstream.Output) -> NewOutput","","    public func parse(_ input: inout Upstream.Input) rethrows -> NewOutput {","      self.transform(try self.upstream.parse(&input))","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Types that conform to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol but are not constructed directly, and instead are"},{"type":"text","text":" "},{"type":"text","text":"constructed via operators, are housed in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"},{"type":"text","text":" type. It’s just an empty enum that"},{"type":"text","text":" "},{"type":"text","text":"serves as a namespace for such parsers."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]}],"kind":"article","references":{"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"url":"\/documentation\/parsing\/gettingstarted","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"title":"Getting Started","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","type":"topic","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"title":"Parsers","url":"\/documentation\/parsing\/parsers","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"role":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"url":"\/documentation\/parsing\/oneof","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"type":"topic","title":"OneOf","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-4hsj5":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Map","preciseIdentifier":"s:7Parsing7ParsersO3MapV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Returns a parser that transforms the output of this parser with a given closure."}],"kind":"symbol","title":"map(_:)","role":"symbol","url":"\/documentation\/parsing\/parser\/map(_:)-4hsj5"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Map":{"navigatorTitle":[{"kind":"identifier","text":"Map"}],"type":"topic","abstract":[{"type":"text","text":"A parser that transforms the output of another parser with a given closure."}],"url":"\/documentation\/parsing\/parsers\/map","title":"Parsers.Map","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Map"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"kind":"article","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"title":"Error Messages","url":"\/documentation\/parsing\/errormessages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"kind":"article","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"title":"Backtracking","url":"\/documentation\/parsing\/backtracking","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","url":"\/documentation\/parsing\/parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"kind":"article","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"title":"String Abstractions","url":"\/documentation\/parsing\/stringabstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic","role":"article"}}}