{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","metadata":{"role":"symbol","externalID":"s:7Parsing21PrependableCollectionP","symbolKind":"protocol","modules":[{"name":"Parsing"}],"roleHeading":"Protocol","title":"PrependableCollection","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"_EmptyInitializable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"PrependableCollection"},{"text":" is a specialized subset of ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":" that is tuned to","type":"text"},{"text":" ","type":"text"},{"text":"incremental printing.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In fact, any ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":" can get a conformance for free:","type":"text"}],"type":"paragraph"},{"code":["extension MyRangeReplaceableCollection: PrependableCollection {}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because it is also less strict than "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":", it is an appropriate protocol"},{"type":"text","text":" "},{"type":"text","text":"to conform to for types that cannot and should not conform to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":" "},{"type":"text","text":"directly."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, ","type":"text"},{"type":"codeVoice","code":"Substring.UTF8View"},{"text":" is a common input for string parsers to parse from, but it","type":"text"},{"text":" ","type":"text"},{"text":"does not conform to ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":". It does, however, conform to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"PrependableCollection"},{"text":" by validating and prepending the given UTF-8 bytes to its underlying","type":"text"},{"text":" ","type":"text"},{"text":"substring. So in order to write a parser against generic sequences of UTF-8 bytes, you would","type":"text"},{"text":" ","type":"text"},{"text":"constrain its input against ","type":"text"},{"type":"codeVoice","code":"PrependableCollection"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example the following "},{"code":"Digits","type":"codeVoice"},{"type":"text","text":" parser is generic over an "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" of bytes, and its"},{"type":"text","text":" "},{"type":"text","text":"printer conformance further constraints its input to be prependable."}],"type":"paragraph"},{"code":["struct Digits<Input: Collection>: Parser","where","  Input.Element == UTF8.CodeUnit,  \/\/ Required for working with a collection of bytes (`UInt8`)","  Input.SubSequence == Input       \/\/ Required for the parser to consume from input","{","  func parse(_ input: inout Input) throws -> Int {","    \/\/ Collect all bytes between ASCII \"0\" and \"9\"","    let prefix = input.prefix(while: { $0 >= .init(ascii: \"0\") && $0 <= .init(ascii: \"9\") })","","    \/\/ Attempt to convert to an `Int`","    guard let int = Int(prefix) else {","      struct ParseError: Error {}","      throw ParseError()","    }","","    \/\/ Incrementally consume bytes from input","    input.removeFirst(prefix.count)","","    return int","  }","}","","extension Digits: ParserPrinter where Input: PrependableCollection {","  func print(_ output: Int, into input: inout Input) {","    \/\/ Convert `Int` to string's underlying bytes","    let bytes = String(output).utf8","","    \/\/ Prepend bytes using `PrependableCollection` conformance.","    input.prepend(contentsOf: bytes)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Digits","type":"codeVoice"},{"text":" parser-printer now works on any collection of UTF-8 code units, including","type":"text"},{"text":" ","type":"text"},{"code":"UTF8View","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ArraySlice<UInt8>","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["var input = \"123\"[...].utf8","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(input) \/\/ \"123\""],"syntax":"swift","type":"codeListing"},{"code":["var input = ArraySlice(\"123\"[...].utf8)","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(decoding: input, as: UTF8.self) \/\/ \"123\""],"syntax":"swift","type":"codeListing"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/co.pointfree.Parsing\/Sl","doc:\/\/co.pointfree.Parsing\/ST"],"kind":"relationships","type":"inheritsFrom"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prependablecollection"]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/init(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)"]}],"abstract":[{"text":"A collection that supports empty initialization and the ability to prepend a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements of elements to itself.","type":"text"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection/init(_:)":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"type":"topic","title":"init(_:)","url":"\/documentation\/parsing\/prependablecollection\/init(_:)","abstract":[{"text":"Creates a new instance of a collection containing the elements of a sequence.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection/prepend(_:)":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"prepend"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")"}],"type":"topic","title":"prepend(_:)","url":"\/documentation\/parsing\/prependablecollection\/prepend(_:)","abstract":[{"text":"Adds an element to the beginning of the collection.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection/prepend(contentsOf:)":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"prepend"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"contentsOf"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"required":true,"type":"topic","title":"prepend(contentsOf:)","url":"\/documentation\/parsing\/prependablecollection\/prepend(contentsof:)","abstract":[{"text":"Inserts the elements of a sequence or collection to the beginning of this collection.","type":"text"}]},"doc://co.pointfree.Parsing/ST":{"identifier":"doc:\/\/co.pointfree.Parsing\/ST","type":"unresolvable","title":"Swift.Sequence"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"navigatorTitle":[{"kind":"identifier","text":"PrependableCollection"}],"url":"\/documentation\/parsing\/prependablecollection","type":"topic","title":"PrependableCollection","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"}],"abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements of elements to itself."}],"kind":"symbol"},"doc://co.pointfree.Parsing/Sl":{"identifier":"doc:\/\/co.pointfree.Parsing\/Sl","type":"unresolvable","title":"Swift.Collection"}}}