{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Parsing"}],"title":"Backtracking"},"kind":"article","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"Backtracking is the process of restoring an input to its original value when parsing fails. While it","type":"text"},{"text":" ","type":"text"},{"text":"can be very useful, backtracking can lead to more complicated parser logic than necessary, and","type":"text"},{"text":" ","type":"text"},{"text":"backtracking too often can lead to performance issues. For this reason, most parsers are not","type":"text"},{"text":" ","type":"text"},{"text":"required to backtrack, and can therefore fail ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"text":" still consume from the input.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The primary way to make use of backtracking in your parsers is through the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"text":" parser, which","type":"text"},{"text":" ","type":"text"},{"text":"tries many parsers on an input and chooses the first that succeeds. This allows you to try many","type":"text"},{"text":" ","type":"text"},{"text":"parsers on the same input, regardless of how much each parser consumes:","type":"text"}],"type":"paragraph"},{"code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"syntax":"swift","type":"codeListing"},{"text":"When to backtrack in your parsers?","anchor":"When-to-backtrack-in-your-parsers","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If you only use the parsers and operators that ship with this library, and in particular you do not"},{"type":"text","text":" "},{"type":"text","text":"create custom conformances to the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true},{"type":"text","text":" protocol, then you never need to worry about explicitly"},{"type":"text","text":" "},{"type":"text","text":"backtracking your input because it will be handled for you automatically. The primary way to allow"},{"type":"text","text":" "},{"type":"text","text":"for backtracking is via the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true},{"type":"text","text":" parser, but there are a few other parsers that also backtrack"},{"type":"text","text":" "},{"type":"text","text":"internally."}],"type":"paragraph"},{"inlineContent":[{"text":"One such example is the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","type":"reference","isActive":true},{"text":" parser, which transforms any parser into one that cannot fail","type":"text"},{"text":" ","type":"text"},{"text":"by catching any thrown errors and returning ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ nil","try parser.parse(\"Hello, true world!\") \/\/ true"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If the parser captured inside ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},{"text":" fails then it backtracks the input to its state before","type":"text"},{"text":" ","type":"text"},{"text":"the parser ran. In particular, if the ","type":"text"},{"type":"codeVoice","code":"Bool.parser()"},{"text":" fails then it will make sure to undo","type":"text"},{"text":" ","type":"text"},{"text":"consuming the leading space “ “ so that later parsers can try.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Another example of a parser that internally backtracks is the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)"},{"type":"text","text":" "},{"type":"text","text":"operator, which coalesces any error thrown by a parser into a default output value:"}],"type":"paragraph"},{"code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","    .replaceError(with: false)","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ false","try parser.parse(\"Hello, true world!\") \/\/ true"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"It backtracks the input to its original value when the parser fails so that later parsers can try."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The only time you need to worry about explicitly backtracking input is when making your own"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" conformances. As a general rule of thumb, if your parser recovers from all failures"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"codeVoice","code":"parse"},{"type":"text","text":" method then it should backtrack the input to its state before the error was thrown."},{"type":"text","text":" "},{"type":"text","text":"This is exactly how "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)"},{"type":"text","text":" work."}],"type":"paragraph"},{"text":"Performance","anchor":"Performance","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If used naively, backtracking can lead to less performant parsing code. For example, if we wanted to"},{"type":"text","text":" "},{"type":"text","text":"parse two integers from a string that were separated by either a dash “-” or slash “\/”, then we"},{"type":"text","text":" "},{"type":"text","text":"could write this as:"}],"type":"paragraph"},{"code":["OneOf {","  Parse { Int.parser(); \"-\"; Int.parser() } \/\/ 1️⃣","  Parse { Int.parser(); \"\/\"; Int.parser() } \/\/ 2️⃣","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"However, parsing slash-separated integers is not going to be performant because it will first run","type":"text"},{"text":" ","type":"text"},{"text":"the entire 1️⃣ parser until it fails, then backtrack to the beginning, and run the 2️⃣ parser. In","type":"text"},{"text":" ","type":"text"},{"text":"particular, the first integer will get parsed twice, unnecessarily repeating that work.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"On the  other hand, we can factor out the common work of the parser and localize the backtracking"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" work to make a much more performant parser:"}],"type":"paragraph"},{"code":["Parse {","  Int.parser()","  OneOf { \"-\"; \"\/\" }","  Int.parser()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"We can even write a benchmark to measure the performance difference:","type":"text"}],"type":"paragraph"},{"code":["let first = OneOf {","  Parse { Int.parser(); \"-\"; Int.parser() }","  Parse { Int.parser(); \"\/\"; Int.parser() }","}","benchmark(\"First\") {","  precondition(try! first.parse(\"100\/200\") == (100, 200))","}","let second = Parse {","  Int.parser()","  OneOf { \"-\"; \"\/\" }","  Int.parser()","}","benchmark(\"Second\") {","  precondition(try! second.parse(\"100\/200\") == (100, 200))","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Running this produces the following results:"}],"type":"paragraph"},{"code":["name   time        std        iterations","----------------------------------------","First  1500.000 ns ±  19.75 %     856753","Second  917.000 ns ±  15.89 %    1000000"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"text":"The second parser takes only 60% of the time to run that the first parser does.","type":"text"}],"type":"paragraph"}]}],"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages"],"generated":true}],"abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"text":"unnecessary.","type":"text"}],"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"kind":"article","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"title":"String Abstractions","url":"\/documentation\/parsing\/stringabstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/replaceError(with:)":{"abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","title":"replaceError(with:)","url":"\/documentation\/parsing\/parser\/replaceerror(with:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"kind":"article","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"title":"Error Messages","url":"\/documentation\/parsing\/errormessages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"role":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"url":"\/documentation\/parsing\/oneof","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"type":"topic","title":"OneOf","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"kind":"article","abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"title":"Design","url":"\/documentation\/parsing\/design","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","url":"\/documentation\/parsing\/parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"url":"\/documentation\/parsing\/gettingstarted","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"title":"Getting Started","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","type":"topic","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","role":"symbol","navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"url":"\/documentation\/parsing\/optionally","title":"Optionally"},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic"}}}