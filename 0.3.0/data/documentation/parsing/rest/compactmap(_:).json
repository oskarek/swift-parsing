{"abstract":[{"text":"Returns a parser that outputs the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" results of calling the given closure with the","type":"text"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/Parser-Implementations"]]},"variants":[{"paths":["\/documentation\/parsing\/rest\/compactmap(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"transform","content":[{"inlineContent":[{"type":"text","text":"A closure that accepts output of this parser as its argument and"},{"type":"text","text":" "},{"type":"text","text":"returns an optional value."}],"type":"paragraph"}]}]},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":"A parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given transformation"},{"type":"text","text":" "},{"type":"text","text":"with the output of this parser."}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"This method is similar to ","type":"text"},{"code":"Sequence.compactMap","type":"codeVoice"},{"text":" in the Swift standard library, as well as","type":"text"},{"text":" ","type":"text"},{"code":"Publisher.compactMap","type":"codeVoice"},{"text":" in the Combine framework.","type":"text"}],"type":"paragraph"},{"code":["let evenParser = Int.parser().compactMap { $0.isMultiple(of: 2) }","var input = \"124 hello world\"[...].utf8","let output = evenParser.parse(&input) \/\/ 124","input \/\/ \" hello world\""],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"metadata":{"roleHeading":"Instance Method","extendedModule":"Parsing","symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compactMap"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","text":"CompactMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"compactMap(_:)","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing6ParserPAAE10compactMapyAA7ParsersO07CompactD0Vy_xqd__Gqd__Sg6OutputQzclF::SYNTHESIZED::s:7Parsing4RestV"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/compactMap(_:)"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Rest/compactMap(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"CompactMap","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"compactMap(_:)","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/compactMap(_:)","url":"\/documentation\/parsing\/rest\/compactmap(_:)","abstract":[{"text":"Returns a parser that outputs the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" results of calling the given closure with the","type":"text"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/parsing","role":"collection","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","abstract":[{"text":"A parser that consumes everything to the end of the collection and returns it as its output.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/parsing\/rest","navigatorTitle":[{"text":"Rest","kind":"identifier"}],"title":"Rest"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest/Parser-Implementations":{"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/Parser-Implementations","abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/parsing\/rest\/parser-implementations","title":"Parser Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"kind":"symbol","url":"\/documentation\/parsing\/parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"role":"symbol","title":"Parsers"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CompactMap":{"title":"Parsers.CompactMap","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CompactMap","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" results of calling the given transformation with the","type":"text"},{"text":" ","type":"text"},{"text":"output of its upstream parser.","type":"text"}],"url":"\/documentation\/parsing\/parsers\/compactmap","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap","type":"topic","navigatorTitle":[{"text":"CompactMap","kind":"identifier"}]}}}