{"abstract":[{"type":"text","text":"Transforms the receiver parser into one that can parse streams of input."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"kind":"symbol","metadata":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"Stream","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO6StreamV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:7Parsing6ParserPAASm5InputRpzrlE6streamAA7ParsersO6StreamVy_xGvp::SYNTHESIZED::s:7Parsing7ParsersO5Take6V","modules":[{"name":"Parsing"}],"role":"symbol","roleHeading":"Instance Property","title":"stream","symbolKind":"property","extendedModule":"Parsing","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take6","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take6\/Parser-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stream"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"text":"Stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO6StreamV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"For example, the following parser can parse an integer followed by a newline from a collection","type":"text"},{"text":" ","type":"text"},{"text":"of UTF8 bytes:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:"}]},{"syntax":"swift","type":"codeListing","code":["let newlineSeparatedIntegers = Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))","  .stream"]},{"type":"paragraph","inlineContent":[{"text":"And then it can be used on a stream, such as values coming from standard in:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","newlineSeparatedIntegers","  .parse(&stdin)"]}]}],"variants":[{"paths":["\/documentation\/parsing\/parsers\/take6\/stream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take6\/stream"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Stream":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","title":"Parsers.Stream","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}],"navigatorTitle":[{"kind":"identifier","text":"Stream"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"role":"symbol","url":"\/documentation\/parsing\/parsers\/stream"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Take6":{"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A parser that runs a parser of a tuple of outputs and another parser, one after the other,"},{"type":"text","text":" "},{"type":"text","text":"and returns a flattened tuple of the first parser’s outputs and the second parser’s output."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Take6","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take6","type":"topic","navigatorTitle":[{"text":"Take6","kind":"identifier"}],"title":"Parsers.Take6","url":"\/documentation\/parsing\/parsers\/take6"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Take6/stream":{"type":"topic","kind":"symbol","url":"\/documentation\/parsing\/parsers\/take6\/stream","abstract":[{"type":"text","text":"Transforms the receiver parser into one that can parse streams of input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take6\/stream","title":"stream","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stream","preciseIdentifier":"s:7Parsing7ParsersO6StreamV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Take6/Parser-Implementations":{"title":"Parser Implementations","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take6\/Parser-Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/parsers\/take6\/parser-implementations","type":"topic","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"kind":"symbol","url":"\/documentation\/parsing\/parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"role":"symbol","title":"Parsers"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/parsing","role":"collection","title":"Parsing"}}}