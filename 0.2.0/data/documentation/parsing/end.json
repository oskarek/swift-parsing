{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"kind":"relationships","type":"conformsTo"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End"},"kind":"symbol","metadata":{"navigatorTitle":[{"kind":"identifier","text":"End"}],"title":"End","symbolKind":"struct","role":"symbol","externalID":"s:7Parsing3EndV","modules":[{"name":"Parsing"}],"roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"type":"codeListing","syntax":"swift","code":["End<Substring>().parse(\"\"[...]) \/\/ (output: (), rest: \"\")","End<Substring>().parse(\"Hello\"[...]) \/\/ (output: nil, rest: \"Hello\")"]}],"kind":"content"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/init()"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/Parser-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/parsing\/end"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","url":"\/documentation\/parsing","abstract":[],"type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/End/parse(_:)":{"url":"\/documentation\/parsing\/end\/parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"type":"topic","title":"parse(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/End/init()":{"kind":"symbol","url":"\/documentation\/parsing\/end\/init()","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/init()","title":"init()"},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}],"title":"End","abstract":[{"text":"A parser that succeeds if the input is empty, and fails otherwise.","type":"text"}],"navigatorTitle":[{"text":"End","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/end","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","kind":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value into an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.Parsing/documentation/Parsing/End/Parser-Implementations":{"type":"topic","title":"Parser Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/parsing\/end\/parser-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/Parser-Implementations","kind":"article"}}}