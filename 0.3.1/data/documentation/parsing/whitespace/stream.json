{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Parser-Implementations"]]},"sections":[],"kind":"symbol","abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"variants":[{"paths":["\/documentation\/parsing\/whitespace\/stream"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"extendedModule":"Parsing","title":"stream","symbolKind":"property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO6StreamV","text":"Stream"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"roleHeading":"Instance Property","externalID":"s:7Parsing6ParserPAASm5InputRpzrlE6streamAA7ParsersO6StreamVy_xGvp::SYNTHESIZED::s:7Parsing10WhitespaceV","modules":[{"name":"Parsing"}],"role":"symbol"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"Stream","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","preciseIdentifier":"s:7Parsing7ParsersO6StreamV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"For example, the following parser can parse an integer followed by a newline from a collection"},{"type":"text","text":" "},{"type":"text","text":"of UTF8 bytes:"}],"type":"paragraph"},{"code":["Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:"}],"type":"paragraph"},{"code":["let newlineSeparatedIntegers = Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))","  .stream"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then it can be used on a stream, such as values coming from standard in:"}],"type":"paragraph"},{"code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","newlineSeparatedIntegers","  .parse(&stdin)"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/stream"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","role":"collection","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","url":"\/documentation\/parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Stream":{"type":"topic","url":"\/documentation\/parsing\/parsers\/stream","navigatorTitle":[{"text":"Stream","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"kind":"symbol","role":"symbol","title":"Parsers.Stream","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Whitespace","kind":"identifier"}],"url":"\/documentation\/parsing\/whitespace","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","kind":"symbol","abstract":[{"type":"text","text":"A parser that consumes all ASCII whitespace from the beginning of the input."}],"navigatorTitle":[{"text":"Whitespace","kind":"identifier"}],"title":"Whitespace","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/Parser-Implementations":{"url":"\/documentation\/parsing\/whitespace\/parser-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Parser-Implementations","role":"collectionGroup","type":"topic","kind":"article","title":"Parser Implementations","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/stream":{"url":"\/documentation\/parsing\/whitespace\/stream","title":"stream","type":"topic","kind":"symbol","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stream","preciseIdentifier":"s:7Parsing7ParsersO6StreamV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/stream"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"title":"Parsers","role":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","url":"\/documentation\/parsing\/parsers","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}]}}}