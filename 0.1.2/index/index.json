{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/init(createparser:)","title":"init(createParser: () -> LazyParser)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/createparser","title":"let createParser: () -> LazyParser","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/parse(_:)","title":"func parse(inout LazyParser.Input) -> LazyParser.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/lazy\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/lazy\/utf8-5zud3","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/lazy\/utf8-7ojcf","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/lazy\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/take(_:)-2are9","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/take(_:)-31qdx","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/take(_:)-3ayiq","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/take(_:)-9s0ca","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/lazy\/take(_:)-9wdme","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"}],"path":"\/documentation\/parsing\/lazy\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/lazy","title":"Lazy","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/input","title":"Input","type":"associatedtype"},{"path":"\/documentation\/parsing\/parser\/output","title":"Output","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parser\/utf8-1tosc","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parser\/utf8-6e25a","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/parsing\/parser\/parse(_:)-a6ba","title":"func parse<S>(S) -> Self.Output?","type":"method"},{"path":"\/documentation\/parsing\/parser\/parse(_:)-23rvk","title":"func parse<S>(S) -> Self.Output?","type":"method"},{"path":"\/documentation\/parsing\/parser\/parse(_:)-2wgr3","title":"func parse(Self.Input) -> (output: Self.Output?, rest: Self.Input)","type":"method"},{"path":"\/documentation\/parsing\/parser\/parse(_:)-4kki1","title":"func parse<SuperSequence>(SuperSequence) -> Self.Output?","type":"method"}],"title":"Parser Implementations","type":"groupMarker"}],"path":"\/documentation\/parsing\/parser\/parse(_:)-4u8o0","title":"func parse(inout Self.Input) -> Self.Output?","type":"method"},{"path":"\/documentation\/parsing\/parser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parser\/take(_:)-1fw8y","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parser\/take(_:)-3ezb3","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parser\/take(_:)-3thpr","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parser\/take(_:)-5qnt6","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parser\/take(_:)-6f1jr","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parser","title":"Parser","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/init(_:)","title":"init(Output)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/output","title":"let output: Output","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/map(_:)-9q3t1","title":"func map<NewOutput>((Output) -> NewOutput) -> Always<Input, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/always\/parse(_:)","title":"func parse(inout Input) -> Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/always\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/always\/utf8-1l92b","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/always\/utf8-25mz8","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/always\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/always\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/always\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/always\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/always\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/always\/map(_:)-crwv","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/always\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/always\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/always\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/always\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/always\/take(_:)-124ru","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/always\/take(_:)-2w0j4","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/always\/take(_:)-3c11n","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/always\/take(_:)-49siq","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/always\/take(_:)-9hcin","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/always\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/always","title":"Always","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparser\/init(_:)-47tyc","title":"init((inout Input) -> Output?)","type":"init"},{"path":"\/documentation\/parsing\/anyparser\/init(_:)-71nto","title":"init<P>(P)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Input, Output>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/parse(_:)","title":"func parse(inout Input) -> Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/anyparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/anyparser\/utf8-171wd","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/anyparser\/utf8-2jhw7","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/anyparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/take(_:)-7j3mc","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/take(_:)-7mbgi","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/take(_:)-8v8nb","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/take(_:)-94eio","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/anyparser\/take(_:)-9l9ng","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/anyparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/anyparser","title":"AnyParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/end\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/end\/parse(_:)","title":"func parse(inout Input) -> Void?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/end\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/end\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/end\/utf8-4dcd6","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/end\/utf8-9gymh","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/end\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/end\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/end\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/end\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/end\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/end\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/end\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/end\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/end\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/end\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/end\/take(_:)-2mhrm","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/end\/take(_:)-30yhy","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/end\/take(_:)-3m3g9","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/end\/take(_:)-6b26a","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/end\/take(_:)-ya5f","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/end\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/end","title":"End","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/fail\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fail\/parse(_:)","title":"func parse(inout Input) -> Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/fail\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/fail\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/fail\/utf8-9codu","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/fail\/utf8-9zc2t","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/fail\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fail\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/fail\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/fail\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/fail\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/fail\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/fail\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/fail\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/fail\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/fail\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/fail\/take(_:)-10hj0","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/fail\/take(_:)-2qmk4","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/fail\/take(_:)-5npa5","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/fail\/take(_:)-7jwkh","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/fail\/take(_:)-9tlm5","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"}],"path":"\/documentation\/parsing\/fail\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/fail","title":"Fail","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/first\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/first\/parse(_:)","title":"func parse(inout Input) -> Input.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/first\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/first\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/first\/utf8-5r6gb","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/first\/utf8-6t2q1","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/first\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/first\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/first\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/first\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/first\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/first\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/first\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/first\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/first\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/first\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/first\/take(_:)-2q4qw","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/first\/take(_:)-3pcmx","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/first\/take(_:)-5m863","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/first\/take(_:)-7bc3x","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/first\/take(_:)-9msrq","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/first\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/first","title":"First","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/firstwhere\/init(_:)","title":"init((Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/firstwhere\/predicate","title":"let predicate: (Input.Element) -> Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/firstwhere\/parse(_:)","title":"func parse(inout Input) -> Input.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/firstwhere\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/firstwhere\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/firstwhere\/utf8-2b78n","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/firstwhere\/utf8-7f7nj","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/firstwhere\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/take(_:)-1ml9z","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/take(_:)-3wl1r","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/take(_:)-8ueye","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/take(_:)-9r7zo","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/firstwhere\/take(_:)-y4cg","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/firstwhere\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/firstwhere","title":"FirstWhere","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/init(_:atleast:atmost:)","title":"init(Upstream, atLeast: Int, atMost: Int)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:atleast:atmost:separator:)","title":"init(Upstream, atLeast: Int, atMost: Int, separator: Separator)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:atleast:atmost:_:)","title":"init(Upstream, into: Result, atLeast: Int, atMost: Int, (inout Result, Upstream.Output) -> Void)","type":"init"},{"path":"\/documentation\/parsing\/many\/init(_:into:atleast:atmost:separator:_:)","title":"init(Upstream, into: Result, atLeast: Int, atMost: Int, separator: Separator, (inout Result, Upstream.Output) -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/initialresult","title":"let initialResult: Result","type":"property"},{"path":"\/documentation\/parsing\/many\/maximum","title":"let maximum: Int","type":"property"},{"path":"\/documentation\/parsing\/many\/minimum","title":"let minimum: Int","type":"property"},{"path":"\/documentation\/parsing\/many\/separator","title":"let separator: Separator?","type":"property"},{"path":"\/documentation\/parsing\/many\/updateaccumulatingresult","title":"let updateAccumulatingResult: (inout Result, Upstream.Output) -> Void","type":"property"},{"path":"\/documentation\/parsing\/many\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/parse(_:)","title":"func parse(inout Upstream.Input) -> Result?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/many\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/many\/utf8-1u8u2","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/many\/utf8-5s8iw","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/many\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/many\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/many\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/many\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/many\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/many\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/many\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/many\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/many\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/many\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/many\/take(_:)-1s0rw","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/many\/take(_:)-2fdni","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/many\/take(_:)-4725a","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/many\/take(_:)-5k9h1","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/many\/take(_:)-9yloc","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/many\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/many","title":"Many","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/newline\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/newline\/parse(_:)","title":"func parse(inout Input) -> Void?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/newline\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/newline\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/newline\/utf8-4hfj6","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/newline\/utf8-89nf7","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/newline\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/newline\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/newline\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/newline\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/newline\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/newline\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/newline\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/newline\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/newline\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/newline\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/newline\/take(_:)-4d3fm","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/newline\/take(_:)-4ettb","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/newline\/take(_:)-8jjlr","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/newline\/take(_:)-9nkyq","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/newline\/take(_:)-xku1","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"}],"path":"\/documentation\/parsing\/newline\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/newline","title":"Newline","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofmany\/init(_:)-8bimh","title":"init([Upstream])","type":"init"},{"path":"\/documentation\/parsing\/oneofmany\/init(_:)-8h5zn","title":"init(Upstream...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofmany\/parsers","title":"let parsers: [Upstream]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofmany\/parse(_:)","title":"func parse(inout Upstream.Input) -> Upstream.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofmany\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/oneofmany\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/oneofmany\/utf8-1okxv","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/oneofmany\/utf8-8jahl","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/oneofmany\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/take(_:)-4rskt","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/take(_:)-7j49k","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/take(_:)-7u0x","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/take(_:)-8lba9","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/oneofmany\/take(_:)-m95d","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/oneofmany\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/oneofmany","title":"OneOfMany","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/init(_:while:)-4n2mo","title":"init(PartialRangeFrom<Int>, while: ((Input.Element) -> Bool)?)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(_:while:)-6hhnk","title":"init(PartialRangeThrough<Int>, while: ((Input.Element) -> Bool)?)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(_:while:)-ljcs","title":"init(Int, while: ((Input.Element) -> Bool)?)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(_:while:)-x8z4","title":"init(ClosedRange<Int>, while: ((Input.Element) -> Bool)?)","type":"init"},{"path":"\/documentation\/parsing\/prefix\/init(minlength:maxlength:while:)","title":"init(minLength: Int, maxLength: Int?, while: (Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/maxlength","title":"let maxLength: Int?","type":"property"},{"path":"\/documentation\/parsing\/prefix\/minlength","title":"let minLength: Int","type":"property"},{"path":"\/documentation\/parsing\/prefix\/predicate","title":"let predicate: ((Input.Element) -> Bool)?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/parse(_:)","title":"func parse(inout Input) -> Input?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefix\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefix\/utf8-8vgjz","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefix\/utf8-96vg6","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefix\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/take(_:)-5vlul","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/take(_:)-6qkrs","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/take(_:)-84vkp","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/take(_:)-d5kb","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefix\/take(_:)-q4s7","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"}],"path":"\/documentation\/parsing\/prefix\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/prefix","title":"Prefix","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/init(_:)-52m64","title":"init(String.UTF8View)","type":"init"},{"path":"\/documentation\/parsing\/prefixthrough\/init(_:)-67yf7","title":"init(String)","type":"init"},{"path":"\/documentation\/parsing\/prefixthrough\/init(_:)-8iizp","title":"init(Input)","type":"init"},{"path":"\/documentation\/parsing\/prefixthrough\/init(_:by:)","title":"init(Input, by: (Input.Element, Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/areequivalent","title":"let areEquivalent: (Input.Element, Input.Element) -> Bool","type":"property"},{"path":"\/documentation\/parsing\/prefixthrough\/possiblematch","title":"let possibleMatch: Input","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/parse(_:)","title":"func parse(inout Input) -> Input?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefixthrough\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefixthrough\/utf8-9av8a","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefixthrough\/utf8-9zj4h","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixthrough\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/take(_:)-4m792","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/take(_:)-617h4","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/take(_:)-6a1o6","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/take(_:)-7i0a8","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixthrough\/take(_:)-8q3vl","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/prefixthrough\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/prefixthrough","title":"PrefixThrough","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/init(_:)-7b2he","title":"init(String)","type":"init"},{"path":"\/documentation\/parsing\/prefixupto\/init(_:)-8sywj","title":"init(Input)","type":"init"},{"path":"\/documentation\/parsing\/prefixupto\/init(_:)-9kyot","title":"init(String.UTF8View)","type":"init"},{"path":"\/documentation\/parsing\/prefixupto\/init(_:by:)","title":"init(Input, by: (Input.Element, Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/areequivalent","title":"let areEquivalent: (Input.Element, Input.Element) -> Bool","type":"property"},{"path":"\/documentation\/parsing\/prefixupto\/possiblematch","title":"let possibleMatch: Input","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/parse(_:)","title":"func parse(inout Input) -> Input?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefixupto\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefixupto\/utf8-107uy","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/prefixupto\/utf8-4bcpj","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/prefixupto\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/take(_:)-12fkg","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/take(_:)-1us0o","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/take(_:)-3209p","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/take(_:)-9kcvj","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/prefixupto\/take(_:)-k1dv","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/prefixupto\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/prefixupto","title":"PrefixUpTo","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/rest\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/rest\/parse(_:)","title":"func parse(inout Input) -> Input?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/rest\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/rest\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/rest\/utf8-1jocj","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/rest\/utf8-58bss","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/rest\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/rest\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/rest\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/rest\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/rest\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/rest\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/rest\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/rest\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/rest\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/rest\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/rest\/take(_:)-282kf","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/rest\/take(_:)-4isez","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/rest\/take(_:)-72pij","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/rest\/take(_:)-9d9ny","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/rest\/take(_:)-9yman","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/rest\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/rest","title":"Rest","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/init(_:)","title":"init(Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/parse(_:)","title":"func parse(inout Upstream.Input) -> Void?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/skip\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/skip\/utf8-88b68","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/skip\/utf8-tgjn","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/skip\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/skip\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/skip\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/skip\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/skip\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/skip\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/skip\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/skip\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/skip\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/skip\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/skip\/take(_:)-1ss5j","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/skip\/take(_:)-3tf1n","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/skip\/take(_:)-6ynem","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/skip\/take(_:)-sxcn","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/skip\/take(_:)-vqdd","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/skip\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/skip","title":"Skip","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/init(_:)","title":"init<PossiblePrefix>(PossiblePrefix)","type":"init"},{"path":"\/documentation\/parsing\/startswith\/init(_:by:)","title":"init<PossiblePrefix>(PossiblePrefix, by: (Input.Element, Input.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/count","title":"let count: Int","type":"property"},{"path":"\/documentation\/parsing\/startswith\/possibleprefix","title":"let possiblePrefix: AnyCollection<Input.Element>","type":"property"},{"path":"\/documentation\/parsing\/startswith\/startswith","title":"let startsWith: (Input) -> Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/parse(_:)","title":"func parse(inout Input) -> Void?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/startswith\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/startswith\/utf8-10vr6","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/startswith\/utf8-5pj4d","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/startswith\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/take(_:)-3rv2c","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/take(_:)-4dujc","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/take(_:)-4eeic","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/take(_:)-5x0yk","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/startswith\/take(_:)-kcs9","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/startswith\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/startswith","title":"StartsWith","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/parse(_:)","title":"func parse(inout Input) -> Input?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/whitespace\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/whitespace\/utf8-25npz","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/whitespace\/utf8-28ldx","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/whitespace\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/take(_:)-3anke","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/take(_:)-42eww","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/take(_:)-62yns","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/take(_:)-837es","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/whitespace\/take(_:)-9505d","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/whitespace\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/whitespace","title":"Whitespace","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/parsing\/conditional\/first(_:)","title":"case first(First)","type":"case"},{"path":"\/documentation\/parsing\/conditional\/second(_:)","title":"case second(Second)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conditional\/parse(_:)","title":"func parse(inout First.Input) -> First.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/conditional\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/conditional\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/conditional\/utf8-5xwr2","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/conditional\/utf8-6b1as","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/conditional\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/take(_:)-2zniy","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/take(_:)-5a74e","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/take(_:)-89uvz","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/take(_:)-dl7o","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/conditional\/take(_:)-ewde","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/conditional\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/conditional","title":"Conditional","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/parse(_:)","title":"func parse(inout Input) -> Bool?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/utf8-4en3d","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/utf8-72u33","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/take(_:)-1jdpr","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/take(_:)-1kpif","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/take(_:)-4vp3x","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/take(_:)-55ueh","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/boolparser\/take(_:)-7uo76","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/boolparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/boolparser","title":"Parsers.BoolParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/init(upstream:transform:)","title":"init(upstream: Upstream, transform: (Upstream.Output) -> Output?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/transform","title":"let transform: (Upstream.Output) -> Output?","type":"property"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/parse(_:)","title":"func parse(inout Upstream.Input) -> Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/utf8-2e0ct","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/utf8-dorj","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/take(_:)-36fs7","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/take(_:)-3cb81","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/take(_:)-4mner","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/take(_:)-5acdp","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/compactmap\/take(_:)-9ekft","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/compactmap\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/compactmap","title":"Parsers.CompactMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/parse(_:)","title":"func parse(inout Input) -> Double?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/utf8-bi3v","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/utf8-uq16","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/take(_:)-5qh0u","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/take(_:)-62sie","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/take(_:)-9rijy","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/take(_:)-d9ir","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/doubleparser\/take(_:)-l6uo","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/doubleparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/doubleparser","title":"Parsers.DoubleParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/init(upstream:predicate:)","title":"init(upstream: Upstream, predicate: (Upstream.Output) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/predicate","title":"let predicate: (Upstream.Output) -> Bool","type":"property"},{"path":"\/documentation\/parsing\/parsers\/filter\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/parse(_:)","title":"func parse(inout Upstream.Input) -> Upstream.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/filter\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/filter\/utf8-64jii","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/filter\/utf8-7hpbl","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/filter\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/take(_:)-3qbhy","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/take(_:)-52f49","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/take(_:)-5bnhg","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/take(_:)-78kvd","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/filter\/take(_:)-9j3ru","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/filter\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/filter","title":"Parsers.Filter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/init(upstream:transform:)","title":"init(upstream: Upstream, transform: (Upstream.Output) -> NewParser)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/transform","title":"let transform: (Upstream.Output) -> NewParser","type":"property"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/parse(_:)","title":"func parse(inout Upstream.Input) -> NewParser.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/utf8-116rk","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/utf8-9wtlj","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/take(_:)-31itt","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/take(_:)-3t66m","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/take(_:)-4zg8d","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/take(_:)-5d74z","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/flatmap\/take(_:)-6frhr","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/flatmap\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/flatmap","title":"Parsers.FlatMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/parse(_:)","title":"func parse(inout Input) -> Float80?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/utf8-86v9z","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/utf8-9plw5","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/take(_:)-2iest","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/take(_:)-2ulo","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/take(_:)-4u6t4","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/take(_:)-81r8l","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/float80parser\/take(_:)-9m0ny","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/float80parser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/float80parser","title":"Parsers.Float80Parser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/parse(_:)","title":"func parse(inout Input) -> Float?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/utf8-5ipan","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/utf8-e4z1","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/take(_:)-1tzzo","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/take(_:)-62lar","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/take(_:)-804f1","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/take(_:)-8ju5e","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/floatparser\/take(_:)-u33p","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/floatparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/floatparser","title":"Parsers.FloatParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/init(issigned:radix:)","title":"init(isSigned: Bool, radix: Output)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/issigned","title":"let isSigned: Bool","type":"property"},{"path":"\/documentation\/parsing\/parsers\/intparser\/radix","title":"let radix: Output","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/parse(_:)","title":"func parse(inout Input) -> Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/intparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/intparser\/utf8-12sdh","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/intparser\/utf8-9s6w0","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/intparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/take(_:)-3k7y4","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/take(_:)-47mrb","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/take(_:)-6mhun","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/take(_:)-8hj16","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/intparser\/take(_:)-993gp","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/intparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/intparser","title":"Parsers.IntParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/init(upstream:transform:)","title":"init(upstream: Upstream, transform: (Upstream.Output) -> Output)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/transform","title":"let transform: (Upstream.Output) -> Output","type":"property"},{"path":"\/documentation\/parsing\/parsers\/map\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/parse(_:)","title":"func parse(inout Upstream.Input) -> Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/map\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/map\/utf8-563be","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/map\/utf8-q1cv","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/map\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/take(_:)-2ve4h","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/take(_:)-3hcgj","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/take(_:)-7800d","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/take(_:)-92hw9","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/map\/take(_:)-97ble","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/map\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/map","title":"Parsers.Map","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneof\/init(_:_:)","title":"init(A, B)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneof\/a","title":"let a: A","type":"property"},{"path":"\/documentation\/parsing\/parsers\/oneof\/b","title":"let b: B","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneof\/parse(_:)","title":"func parse(inout A.Input) -> A.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneof\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/oneof\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/oneof\/utf8-3xfgo","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/oneof\/utf8-7rlok","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/oneof\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/take(_:)-2c0qr","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/take(_:)-3dljj","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/take(_:)-61ve","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/take(_:)-6cew6","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/oneof\/take(_:)-9vs4f","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/oneof\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/oneof","title":"Parsers.OneOf","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/init(_:)","title":"init(Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/parse(_:)","title":"func parse(inout Upstream.Input) -> Upstream.Output??","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/utf8-1xaeb","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/utf8-7vxpl","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/take(_:)-2rlas","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/take(_:)-6c5gf","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/take(_:)-7b78i","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/take(_:)-7egyj","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/optionalparser\/take(_:)-9mecy","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/optionalparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/optionalparser","title":"Parsers.OptionalParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/init(upstream:downstream:)","title":"init(upstream: Upstream, downstream: Downstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/downstream","title":"let downstream: Downstream","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pipe\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/parse(_:)","title":"func parse(inout Upstream.Input) -> Downstream.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pipe\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pipe\/utf8-7qdir","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pipe\/utf8-8n0i6","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pipe\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/take(_:)-14xk7","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/take(_:)-1sla9","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/take(_:)-32qp4","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/take(_:)-4k044","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pipe\/take(_:)-6pg9","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/pipe\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/pipe","title":"Parsers.Pipe","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/init(downstream:keypath:)","title":"init(downstream: Downstream, keyPath: WritableKeyPath<Input, Downstream.Input>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/downstream","title":"let downstream: Downstream","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pullback\/keypath","title":"let keyPath: WritableKeyPath<Input, Downstream.Input>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/parse(_:)","title":"func parse(inout Input) -> Downstream.Output?","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/pullback(_:)-1910g","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Input>) -> Parsers.Pullback<Downstream, NewInput>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pullback\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pullback\/utf8-5dq55","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/pullback\/utf8-61m5x","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/pullback\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/pullback(_:)-9x3bo","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/take(_:)-312yz","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/take(_:)-75f23","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/take(_:)-8n41y","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/take(_:)-9jz81","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/pullback\/take(_:)-9w2nl","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/pullback\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/pullback","title":"Parsers.Pullback","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/init(_:_:)","title":"init(A, B)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/a","title":"let a: A","type":"property"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/b","title":"let b: B","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/parse(_:)","title":"func parse(inout A.Input) -> B.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/utf8-31wkm","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/utf8-4kshx","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/take(_:)-1cnnw","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/take(_:)-2mfhh","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/take(_:)-8sbea","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/take(_:)-9xtxd","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipfirst\/take(_:)-glz7","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/skipfirst\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/skipfirst","title":"Parsers.SkipFirst","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/init(_:_:)","title":"init(A, B)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/a","title":"let a: A","type":"property"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/b","title":"let b: B","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/parse(_:)","title":"func parse(inout A.Input) -> A.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/utf8-3qozx","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/utf8-5hpc0","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/take(_:)-18dsr","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/take(_:)-2gz46","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/take(_:)-2hjd","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/take(_:)-9c07j","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/skipsecond\/take(_:)-b7xo","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/skipsecond\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/skipsecond","title":"Parsers.SkipSecond","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/stream\/init(upstream:)","title":"init(upstream: Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/stream\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/stream\/parse(_:)","title":"func parse(inout AnyIterator<Upstream.Input>) -> [Upstream.Output]?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/stream\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/take(_:)-25atn","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/take(_:)-52zz4","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/take(_:)-5ptjc","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/take(_:)-9g9b0","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/stream\/take(_:)-ruaw","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/stream\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/stream","title":"Parsers.Stream","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/parser","title":"let parser: Parsers.BoolParser<Substring.UTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/parse(_:)","title":"func parse(inout Substring) -> Bool?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/utf8","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/take(_:)-2iar3","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/take(_:)-3lem7","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/take(_:)-5wwlk","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/take(_:)-7ayc8","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringboolparser\/take(_:)-n8ll","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/substringboolparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/substringboolparser","title":"Parsers.SubstringBoolParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/parser","title":"let parser: Parsers.DoubleParser<Substring.UTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/parse(_:)","title":"func parse(inout Substring) -> Double?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/utf8","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/take(_:)-1982","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/take(_:)-2elfv","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/take(_:)-50bl4","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/take(_:)-6ypr4","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/take(_:)-9y1sy","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/substringdoubleparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/substringdoubleparser","title":"Parsers.SubstringDoubleParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/parser","title":"let parser: Parsers.Float80Parser<Substring.UTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/parse(_:)","title":"func parse(inout Substring) -> Float80?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/utf8","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/take(_:)-28d3j","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/take(_:)-3s37l","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/take(_:)-44i6r","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/take(_:)-5kq2l","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/take(_:)-79yyo","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/substringfloat80parser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/substringfloat80parser","title":"Parsers.SubstringFloat80Parser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/parser","title":"let parser: Parsers.FloatParser<Substring.UTF8View>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/parse(_:)","title":"func parse(inout Substring) -> Float?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/utf8","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/take(_:)-3uiq7","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/take(_:)-3x915","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/take(_:)-5qf3k","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/take(_:)-77vcv","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/take(_:)-lp3","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/substringfloatparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/substringfloatparser","title":"Parsers.SubstringFloatParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/init(issigned:radix:)","title":"init(isSigned: Bool, radix: Output)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/parser","title":"let parser: Parsers.IntParser<Substring.UTF8View, Output>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/parse(_:)","title":"func parse(inout Substring) -> Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/utf8","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/take(_:)-1ygf4","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/take(_:)-2eq73","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/take(_:)-2lhvc","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/take(_:)-5qx4o","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringintparser\/take(_:)-8n383","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/substringintparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/substringintparser","title":"Parsers.SubstringIntParser","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/init(upstream:)","title":"init(upstream: Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/parse(_:)","title":"func parse(inout Substring.UTF8View) -> Upstream.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/take(_:)-1drhv","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/take(_:)-2795a","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/take(_:)-4o4nx","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/take(_:)-56jyl","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/take(_:)-64i7z","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/substringtoutf8view\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/substringtoutf8view","title":"Parsers.SubstringToUTF8View","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/init(upstream:)","title":"init(upstream: Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/parse(_:)","title":"func parse(inout Substring.UnicodeScalarView) -> Upstream.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/utf8","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/take(_:)-4ylxt","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/take(_:)-6i1t1","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/take(_:)-7ivmo","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/take(_:)-7r7o","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/take(_:)-vopq","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/substringtounicodescalars","title":"Parsers.SubstringToUnicodeScalars","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take2\/init(_:_:)","title":"init(A, B)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take2\/a","title":"let a: A","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take2\/b","title":"let b: B","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take2\/parse(_:)","title":"func parse(inout A.Input) -> (A.Output, B.Output)?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take2\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take2\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take2\/utf8-2dgnd","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take2\/utf8-8krpy","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take2\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/take(_:)-2yqi","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/take(_:)-39dgu","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/take(_:)-69c2k","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/take(_:)-91uz8","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take2\/take(_:)-9tw5x","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/take2\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/take2","title":"Parsers.Take2","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take3\/init(_:_:)","title":"init(AB, C)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take3\/ab","title":"let ab: AB","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take3\/c","title":"let c: C","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take3\/parse(_:)","title":"func parse(inout AB.Input) -> (A, B, C.Output)?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take3\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take3\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take3\/utf8-2dh4l","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take3\/utf8-8krg8","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take3\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/take(_:)-2yfc","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/take(_:)-39ddo","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/take(_:)-69cc2","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/take(_:)-91v9m","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take3\/take(_:)-9tvvl","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/take3\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/take3","title":"Parsers.Take3","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take4\/init(_:_:)","title":"init(ABC, D)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take4\/abc","title":"let abc: ABC","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take4\/d","title":"let d: D","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take4\/parse(_:)","title":"func parse(inout ABC.Input) -> (A, B, C, D.Output)?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take4\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take4\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take4\/utf8-2dh7l","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take4\/utf8-8ksdu","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take4\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/take(_:)-30li","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/take(_:)-39cui","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/take(_:)-69cmc","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/take(_:)-91vr0","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take4\/take(_:)-9tvlh","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/take4\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/take4","title":"Parsers.Take4","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take5\/init(_:_:)","title":"init(ABCD, E)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take5\/abcd","title":"let abcd: ABCD","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take5\/e","title":"let e: E","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take5\/parse(_:)","title":"func parse(inout ABCD.Input) -> (A, B, C, D, E.Output)?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take5\/stream","title":"var stream: Parsers.Stream<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take5\/unicodescalars","title":"var unicodeScalars: Parsers.SubstringToUnicodeScalars<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take5\/utf8-2dhp1","title":"var utf8: Parsers.SubstringToUTF8View<Self>","type":"property"},{"path":"\/documentation\/parsing\/parsers\/take5\/utf8-8ks00","title":"var utf8: Parsers.UnicodeScalarViewToUTF8View<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/take5\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/take(_:)-30c0","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/take(_:)-39cpw","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/take(_:)-69cwm","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/take(_:)-91w1a","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/take5\/take(_:)-9tv89","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/take5\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/take5","title":"Parsers.Take5","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/init(upstream:)","title":"init(upstream: Upstream)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/upstream","title":"let upstream: Upstream","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/parse(_:)","title":"func parse(inout Substring.UTF8View) -> Upstream.Output?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/flatmap(_:)","title":"func flatMap<NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/ignoreoutput()","title":"func ignoreOutput() -> Skip<Self>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/map(_:)","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/orelse(_:)","title":"func orElse<P>(P) -> Parsers.OneOf<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/pipe(_:)","title":"func pipe<Downstream>(Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/skip(_:)","title":"func skip<P>(P) -> Parsers.SkipSecond<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/take(_:)-3sf8e","title":"func take<A, B, C, D, P>(P) -> Parsers.Take5<Self, A, B, C, D, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/take(_:)-6octc","title":"func take<A, B, P>(P) -> Parsers.Take3<Self, A, B, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/take(_:)-732wi","title":"func take<A, B, C, P>(P) -> Parsers.Take4<Self, A, B, C, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/take(_:)-8ong6","title":"func take<P>(P) -> Parsers.Take2<Self, P>","type":"method"},{"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/take(_:)-9b2gq","title":"func take<P>(P) -> Parsers.SkipFirst<Self, P>","type":"method"}],"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parsers\/unicodescalarviewtoutf8view","title":"Parsers.UnicodeScalarViewToUTF8View","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/parsing\/parsers\/always","title":"Parsers.Always","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/anyparser","title":"Parsers.AnyParser","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/conditional","title":"Parsers.Conditional","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/end","title":"Parsers.End","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/fail","title":"Parsers.Fail","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/first","title":"Parsers.First","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/firstwhere","title":"Parsers.FirstWhere","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/lazy","title":"Parsers.Lazy","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/many","title":"Parsers.Many","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/newline","title":"Parsers.Newline","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/oneofmany","title":"Parsers.OneOfMany","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/prefix","title":"Parsers.Prefix","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/prefixthrough","title":"Parsers.PrefixThrough","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/prefixupto","title":"Parsers.PrefixUpTo","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/rest","title":"Parsers.Rest","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/skip","title":"Parsers.Skip","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/startswith","title":"Parsers.StartsWith","type":"typealias"},{"path":"\/documentation\/parsing\/parsers\/whitespace","title":"Parsers.Whitespace","type":"typealias"}],"path":"\/documentation\/parsing\/parsers","title":"Parsers","type":"enum"}],"path":"\/documentation\/parsing","title":"Parsing","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}